// .\shaders\fragment.glsl
const char *fragment_glsl =
"#version 430 core\n"
"\n"
"in vec3 normal;\n"
"in vec2 tex_coord;\n"
"\n"
"out vec4 frag_color;\n"
"\n"
"layout(location = 0) uniform vec3 color_diffuse;\n"
"layout(location = 1) uniform vec3 color_ambient;\n"
"layout(location = 2) uniform vec3 color_specular;\n"
"layout(location = 3) uniform vec3 color_emissive;\n"
"\n"
"layout(location = 4) uniform float material_transparency;\n"
"layout(location = 5) uniform float material_refraction;\n"
"layout(location = 6) uniform float material_specular_exp;\n"
"\n"
"uniform sampler2D texture_diffuse;\n"
"\n"
"void main() {\n"
"\n"
"    float global_ambient_intensity = 0.5f;\n"
"    vec3 global_ambient_color = global_ambient_intensity * vec3(0.86, 0.94, 1);\n"
"    vec3 ambient = global_ambient_color * color_ambient;\n"
"\n"
"    float global_sun_intensity = 1.3f;\n"
"    vec3 global_sun_color = global_sun_intensity * vec3(1, 0.98, 0.95);\n"
"    vec3 global_sun_dir = normalize(vec3(1.0f, -1.0f, 1.0f));\n"
"    float sun_angle = max(dot(normal, global_sun_dir), 0.0f);\n"
"    vec3 diffuse = sun_angle * global_sun_color * color_diffuse;\n"
"\n"
"    vec3 flat_color = diffuse + ambient;\n"
"\n"
"    vec4 tex_color = texture(texture_diffuse, tex_coord);\n"
"    if(tex_color.a == 0.0f)\n"
"        discard;\n"
"\n"
"    frag_color = vec4(flat_color, 1 - material_transparency) * tex_color;\n"
"}\n"
"\0";
// .\shaders\vertex.glsl
const char *vertex_glsl =
"#version 330 core\n"
"layout(location = 0) in vec3 attr_position;\n"
"layout(location = 1) in vec3 attr_normal;\n"
"layout(location = 2) in vec2 attr_tex_coord;\n"
"\n"
"out vec3 normal;\n"
"out vec2 tex_coord;\n"
"\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"uniform mat4 projection;\n"
"\n"
"void main() {\n"
"    gl_Position = projection * view * model * vec4(attr_position, 1.0);\n"
"    tex_coord = attr_tex_coord;\n"
"    normal = normalize(attr_normal);\n"
"}\n"
"\0";
